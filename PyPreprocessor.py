'''
    Python Preprocessor to Generate Abaqus Input File
    include:
        mesher
'''

from PyMesher import Geometry

class InpFile:

    # constructor, pass in side length and nodes along a side
    def __init__(self, jobName, t_len, t_wid, t_nlen, t_nwid, t_thk=3e-4, t_E=2e6):
        
        # create mesh
        self.__len = t_len
        self.__wid = t_wid
        dx  = self.__len / float(t_nlen-1)
        dy  = self.__wid / float(t_nwid-1)
        self.geo = Geometry(t_nlen, t_nwid, dx, dy)
        self.geo.buildMesh()

        self.__thk = t_thk
        self.__E   = t_E

        # hard coded physical parameters
        self.__nu  = 0.3
        self.__rho = 1e3

        # plot to check mesh
        # self.geo.plotMesh()

        # Job file prefix
        self.__jobName = jobName

    # assign E and thk
    def setParam(self, t_E, t_thk):
        self.__E = t_E
        self.__thk = t_thk

    # main file to write abaqus input file (cantilever)
    def writeInp1(self):
        # write coordinate and connecitivty files
        self.geo.writeXYZ(self.__jobName)
        self.geo.writeMesh(self.__jobName)

        # create input file
        filename = self.__jobName + ".inp"
        fxyz = self.__jobName + "-coordinates.txt"
        fconn = self.__jobName + "-connectivity.txt"

        with open(filename, 'w') as fout:

            #! write heading
            fout.write("*Heading\n"+
                       "**\n**Cantilever plate bending under gravity\n**\n"+
                       "** " + filename + "\n"+
                       "** Generated by: Python Preprocessor Scripts\n"+
                       "*Preprint, echo=NO, model=NO, history=NO, contact=NO\n")

            #! write part
            fout.write("**\n"+
                       "**  PARTS\n"+
                       "**\n")
            # include coordinate file
            fout.write("*Part, name=Part-shell\n"+
                       "*Node\n"+
                       "*INCLUDE, INPUT="+fxyz+"\n")
            # include connecitivty file
            fout.write("*Element, type=S3\n"+
                       "*INCLUDE, INPUT="+fconn+"\n")
            # sets for instance, usually for section properties, include all nodes/elements
            fout.write("*Nset, nset=Set-all, generate\n"+
                       "1, " + str(self.geo.nn) + " , 1\n"+
                       "*Elset, elset=Set-all, generate\n"+
                       "1, " + str(self.geo.nel) + " , 1\n")
            # write section
            fout.write("** Section: Section-shell\n"+
                       "*Shell Section, elset=Set-all, material=Material-1, section integration=GAUSS\n"+
                       "{:e}".format(self.__thk)+ ", 3\n")
            fout.write("*End Part\n")

            #! write assembly
            fout.write("**\n"+
                       "**  ASSEMBLY\n"+
                       "**\n"+
                       "*Assembly, name=Assembly\n")
            fout.write("**\n"+
                       "*Instance, name=Part-shell-1, part=Part-shell\n"+
                       "*End Instance\n"+
                       "**\n")
            # write boundary sets
            sets = self.geo.getClamped()
            fout.write("*Nset, nset=Set-clamped, instance=Part-shell-1, generate\n"+
                       sets[0]+"\n"+
                       "*Elset, elset=Set-clamped, instance=Part-shell-1, generate\n"+
                       sets[1]+"\n")
            fout.write("*End Assembly\n")    

            #! write material
            fout.write("**\n"+
                       "**  MATERIALS\n"+
                       "**\n")
            fout.write("*Material, name=Material-1\n"+
                       "*Density\n"+
                       "{:e}".format(self.__rho)+",\n"+
                       "*Elastic\n"+
                       "{:e}".format(self.__E)+", "+str(self.__nu)+"\n")

            #! write boundary conditions
            fout.write("**\n"+
                       "**  BOUNDARY CONDITIONS\n"+
                       "**\n"+
                       "** Name: BC-clamped Type: Displacement/Rotation\n")
            # all dofs constrained
            fout.write("*Boundary\n"+
                       "Set-clamped, 1, 6\n")

            #! write steps
            fout.write("**\n"+
                       "**  STEP: Step-1\n"+
                       "**\n")
            fout.write("*Step, name=Step-1, nlgeom=YES, inc=1000\n"+
                       "*Static\n"+
                       "1., 1., 1e-05, 1.\n")
            fout.write("**\n"+
                       "**  LOADS\n"+
                       "**\n")
            fout.write("** Name: Load-gravity   Type: Gravity\n"+
                       "*Dload\n"+
                       ", GRAV, 9.81, 0., 0., -1.\n")
            fout.write("**\n"+
                       "**  OUTPUT REQUESTS\n"+
                       "**\n")
            fout.write("*Restart, write, frequency=0\n")
            fout.write("**\n"+
                       "**  FIELD OUTPUT: F-Output-1\n"+
                       "**\n")
            fout.write("*Output, field, frequency=99999\n"+
                       "*Node Output, exterior\n"+
                       "A, CF, COORD, RF, U, V\n"+
                       "*Element Output, exterior, directions=YES\n"+
                       "LE, PE, PEEQ, PEMAG, S\n"+
                       "*Contact Output\n"+
                       "CDISP, CSTRESS\n")
            fout.write("**\n"+
                       "**  HISTORY OUTPUT: H-Output-1\n"+
                       "**\n")
            fout.write("*Output, history, variable=PRESELECT\n")   
            fout.write("*End Step\n")

    # hanging corner
    def writeInp2(self):
        # write coordinate and connecitivty files
        self.geo.writeXYZ(self.__jobName)
        self.geo.writeMesh(self.__jobName)

        # create input file
        filename = self.__jobName + ".inp"
        fxyz = self.__jobName + "-coordinates.txt"
        fconn = self.__jobName + "-connectivity.txt"

        with open(filename, 'w') as fout:

            #! write heading
            fout.write("*Heading\n"+
                       "**\n**Hangning corner\n**\n"+
                       "** " + filename + "\n"+
                       "** Generated by: Python Preprocessor Scripts\n"+
                       "*Preprint, echo=NO, model=NO, history=NO, contact=NO\n")

            #! write part
            fout.write("**\n"+
                       "**  PARTS\n"+
                       "**\n")
            # include coordinate file
            fout.write("*Part, name=Part-shell\n"+
                       "*Node\n"+
                       "*INCLUDE, INPUT="+fxyz+"\n")
            # include connecitivty file
            fout.write("*Element, type=S3\n"+
                       "*INCLUDE, INPUT="+fconn+"\n")
            # sets for instance, usually for section properties, include all nodes/elements
            fout.write("*Nset, nset=Set-all, generate\n"+
                       "1, " + str(self.geo.nn) + " , 1\n"+
                       "*Elset, elset=Set-all, generate\n"+
                       "1, " + str(self.geo.nel) + " , 1\n")
            # write section
            fout.write("** Section: Section-shell\n"+
                       "*Shell Section, elset=Set-all, material=Material-1, section integration=GAUSS\n"+
                       "{:e}".format(self.__thk)+ ", 3\n")
            fout.write("*End Part\n")

            #! write assembly
            fout.write("**\n"+
                       "**  ASSEMBLY\n"+
                       "**\n"+
                       "*Assembly, name=Assembly\n")
            fout.write("**\n"+
                       "*Instance, name=Part-shell-1, part=Part-shell\n"+
                       "*End Instance\n"+
                       "**\n")
            # write boundary sets
            fout.write("*Nset, nset=Set-corner, instance=Part-shell-1\n"+
                       "1,\n")
            fout.write("*End Assembly\n")    

            #! write material
            fout.write("**\n"+
                       "**  MATERIALS\n"+
                       "**\n")
            fout.write("*Material, name=Material-1\n"+
                       "*Density\n"+
                       "{:e}".format(self.__rho)+",\n"+
                       "*Elastic\n"+
                       "{:e}".format(self.__E)+", "+str(self.__nu)+"\n")

            #! write boundary conditions
            fout.write("**\n"+
                       "**  BOUNDARY CONDITIONS\n"+
                       "**\n"+
                       "** Name: BC-corner Type: Displacement/Rotation\n")
            # all dofs constrained
            fout.write("*Boundary\n"+
                       "Set-corner, 1, 3\n")

            #! write steps
            max_time = 10
            max_inc = 3000
            fout.write("**\n"+
                       "**  STEP: Step-1\n"+
                       "**\n")
            fout.write("*Step, name=Step-1, nlgeom=YES, inc="+"{:d}".format(max_inc)+"\n"+
                       "*Dynamic,application=QUASI-STATIC,initial=NO\n"+
                       "0.01,"+"{:d}".format(max_time)+",1e-05\n")
            fout.write("**\n"+
                       "**  LOADS\n"+
                       "**\n")
            fout.write("** Name: Load-gravity   Type: Gravity\n"+
                       "*Dload\n"+
                       ", GRAV, 9.81, 0., 0., -1.\n")
            fout.write("**\n"+
                       "**  OUTPUT REQUESTS\n"+
                       "**\n")
            fout.write("*Restart, write, frequency=0\n")
            fout.write("**\n"+
                       "**  FIELD OUTPUT: F-Output-1\n"+
                       "**\n")
            fout.write("*Output, field, frequency=99999\n"+
                       "*Node Output, exterior\n"+
                       "A, CF, COORD, RF, U, V\n"+
                       "*Element Output, exterior, directions=YES\n"+
                       "LE, PE, PEEQ, PEMAG, S\n"+
                       "*Contact Output\n"+
                       "CDISP, CSTRESS\n")
            fout.write("**\n"+
                       "**  HISTORY OUTPUT: H-Output-1\n"+
                       "**\n")
            fout.write("*Output, history, variable=PRESELECT\n")   
            fout.write("*End Step\n")


    # uniaxial tension undergravity
    def writeInp3(self):
        # write coordinate and connecitivty files
        self.geo.writeXYZ(self.__jobName, 2)
        self.geo.writeMesh(self.__jobName)

        # create input file
        filename = self.__jobName + ".inp"
        fxyz = self.__jobName + "-coordinates.txt"
        fconn = self.__jobName + "-connectivity.txt"

        with open(filename, 'w') as fout:

            #! write heading
            fout.write("*Heading\n"+
                       "**\n** Uniaxial tension under gravity\n**\n"+
                       "** " + filename + "\n"+
                       "** Generated by: Python Preprocessor Scripts\n"+
                       "*Preprint, echo=NO, model=NO, history=NO, contact=NO\n")

            #! write part
            fout.write("**\n"+
                       "**  PARTS\n"+
                       "**\n")
            # include coordinate file
            fout.write("*Part, name=Part-shell\n"+
                       "*Node\n"+
                       "*INCLUDE, INPUT="+fxyz+"\n")
            # include connecitivty file
            fout.write("*Element, type=CPS3\n"+
                       "*INCLUDE, INPUT="+fconn+"\n")
            # sets for instance, usually for section properties, include all nodes/elements
            fout.write("*Nset, nset=Set-all, generate\n"+
                       "1, " + str(self.geo.nn) + " , 1\n"+
                       "*Elset, elset=Set-all, generate\n"+
                       "1, " + str(self.geo.nel) + " , 1\n")
            # write section
            fout.write("** Section: Section-solid\n"+
                       "*Solid Section, elset=Set-all, material=Material-1\n"+
                       ",\n")
            fout.write("*End Part\n")

            #! write assembly
            fout.write("**\n"+
                       "**  ASSEMBLY\n"+
                       "**\n"+
                       "*Assembly, name=Assembly\n")
            fout.write("**\n"+
                       "*Instance, name=Part-shell-1, part=Part-shell\n"+
                       "*End Instance\n"+
                       "**\n")
            # write boundary sets
            # corner
            fout.write("*Nset, nset=Set-corner, instance=Part-shell-1\n"+
                       "1,\n")
            # left edge
            sets = self.geo.getEdges("left")
            fout.write("*Nset, nset=Set-left, instance=Part-shell-1, generate\n"+
                       sets[0]+"\n"+
                       "*Elset, elset=Set-left, instance=Part-shell-1, generate\n"+
                       sets[1]+"\n"+
                       "*End Assembly\n")

            #! write material
            fout.write("**\n"+
                       "**  MATERIALS\n"+
                       "**\n")
            fout.write("*Material, name=Material-1\n"+
                       "*Density\n"+
                       "{:e}".format(self.__rho)+",\n"+
                       "*Elastic\n"+
                       "{:e}".format(self.__E)+", "+str(self.__nu)+"\n")

            #! write boundary conditions
            fout.write("**\n"+
                       "**  BOUNDARY CONDITIONS\n"+
                       "**\n")
            # roller-support left
            fout.write("** Name: BC-left Type: Displacement/Rotation\n"+
                       "*Boundary\n"+
                       "Set-left, 1, 1\n")
            # pinned corner
            fout.write("** Name: Set-corner Type: Displacement/Rotation\n"+
                       "*Boundary\n"+
                       "Set-corner, 1, 2\n")

            #! write steps
            fout.write("**\n"+
                       "**  STEP: Step-1\n"+
                       "**\n")
            fout.write("*Step, name=Step-1, nlgeom=YES, inc=1000\n"+
                       "*Static\n"+
                       "1., 1., 1e-05, 1.\n")
            fout.write("**\n"+
                       "**  LOADS\n"+
                       "**\n"+
                       "*Dload\n"+
                       ", GRAV, 9.81, 1., 0.\n")
            fout.write("**\n"+
                       "**  OUTPUT REQUESTS\n"+
                       "**\n")
            fout.write("*Restart, write, frequency=0\n")
            fout.write("**\n"+
                       "**  FIELD OUTPUT: F-Output-1\n"+
                       "**\n")
            fout.write("*Output, field\n"+
                       "*Node Output\n"+
                       "CF, RF, U\n"+
                       "*Element Output, directions=YES\n"+
                       "ELEDEN, ELEN, ENER, LE, PE, PEEQ, PEMAG, S\n"+
                       "*Contact Output\n"+
                       "CDISP, CSTRESS\n")
            fout.write("**\n"+
                       "**  HISTORY OUTPUT: H-Output-1\n"+
                       "**\n")
            fout.write("*Output, history, variable=PRESELECT\n")   
            fout.write("*End Step\n")

    # two element test
    def writeInp4(self):
        # write coordinate and connecitivty files
        self.geo.writeXYZ(self.__jobName)
        self.geo.writeMesh(self.__jobName)

        # create input file
        filename = self.__jobName + ".inp"
        fxyz = self.__jobName + "-coordinates.txt"
        fconn = self.__jobName + "-connectivity.txt"

        with open(filename, 'w') as fout:

            #! write heading
            fout.write("*Heading\n"+
                       "**\n** Two elements bending under gravity\n**\n"+
                       "** " + filename + "\n"+
                       "** Generated by: Python Preprocessor Scripts\n"+
                       "*Preprint, echo=NO, model=NO, history=NO, contact=NO\n")

            #! write part
            fout.write("**\n"+
                       "**  PARTS\n"+
                       "**\n")
            # include coordinate file
            fout.write("*Part, name=Part-shell\n"+
                       "*Node\n"+
                       "*INCLUDE, INPUT="+fxyz+"\n")
            # include connecitivty file
            fout.write("*Element, type=S3\n"+
                       "*INCLUDE, INPUT="+fconn+"\n")
            # sets for instance, usually for section properties, include all nodes/elements
            fout.write("*Nset, nset=Set-all, generate\n"+
                       "1, " + str(self.geo.nn) + " , 1\n"+
                       "*Elset, elset=Set-all\n"+
                       "1, " + str(self.geo.nel) + "\n")
            # write section
            fout.write("** Section: Section-shell\n"+
                       "*Shell Section, elset=Set-all, material=Material-1, section integration=GAUSS\n"+
                       "{:e}".format(self.__thk)+ ", 3\n")
            fout.write("*End Part\n")

            #! write assembly
            fout.write("**\n"+
                       "**  ASSEMBLY\n"+
                       "**\n"+
                       "*Assembly, name=Assembly\n")
            fout.write("**\n"+
                       "*Instance, name=Part-shell-1, part=Part-shell\n"+
                       "*End Instance\n"+
                       "**\n")
            # write boundary sets
            fout.write("*Nset, nset=Set-pinned, instance=Part-shell-1\n"+
                       "1, 3, 4\n")
            fout.write("*End Assembly\n")    

            #! write material
            fout.write("**\n"+
                       "**  MATERIALS\n"+
                       "**\n")
            fout.write("*Material, name=Material-1\n"+
                       "*Density\n"+
                       "{:e}".format(self.__rho)+",\n"+
                       "*Elastic\n"+
                       "{:e}".format(self.__E)+", "+str(self.__nu)+"\n")

            #! write boundary conditions
            fout.write("**\n"+
                       "**  BOUNDARY CONDITIONS\n"+
                       "**\n"+
                       "** Name: BC-pinned Type: Displacement/Rotation\n")
            # all dofs constrained
            fout.write("*Boundary\n"+
                       "Set-pinned, 1, 3\n")

            #! write steps
            fout.write("**\n"+
                       "**  STEP: Step-1\n"+
                       "**\n")
            fout.write("*Step, name=Step-1, nlgeom=YES, inc=3000\n"+
                       "*Dynamic,application=QUASI-STATIC,initial=NO\n"+
                       "0.1,30.,0.0003\n")
            fout.write("**\n"+
                       "**  LOADS\n"+
                       "**\n")
            fout.write("** Name: Load-gravity   Type: Gravity\n"+
                       "*Dload\n"+
                       ", GRAV, 9.81, 0., 0., -1.\n")
            fout.write("**\n"+
                       "**  OUTPUT REQUESTS\n"+
                       "**\n")
            fout.write("*Restart, write, frequency=0\n")
            fout.write("**\n"+
                       "**  FIELD OUTPUT: F-Output-1\n"+
                       "**\n")
            fout.write("*Output, field, frequency=99999\n"+
                       "*Node Output, exterior\n"+
                       "A, CF, COORD, RF, U, V\n"+
                       "*Element Output, exterior, directions=YES\n"+
                       "LE, PE, PEEQ, PEMAG, S\n"+
                       "*Contact Output\n"+
                       "CDISP, CSTRESS\n")
            fout.write("**\n"+
                       "**  HISTORY OUTPUT: H-Output-1\n"+
                       "**\n")
            fout.write("*Output, history, variable=PRESELECT\n")   
            fout.write("*End Step\n")