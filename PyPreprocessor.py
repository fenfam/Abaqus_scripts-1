'''
    Python Preprocessor to Generate Abaqus Input File
    include:
        mesher
'''

from PyMesher import Geometry

class InpFile:

    # constructor, pass in side length and nodes along a side
    def __init__(self, t_len, t_wid, t_nlen, t_nwid):
        
        # create mesh
        dx  = t_len / float(t_nlen-1)
        dy  = t_wid / float(t_nwid-1)
        self.geo = Geometry(t_nlen, t_nwid, dx, dy)
        self.geo.buildMesh()

        #* hard coded physical parameters
        self.__thk = 1e-3
        self.__E   = 1e9
        self.__nu  = 0.3
        self.__rho = 1e3

        # plot to check mesh
        # self.geo.plotMesh()

        # Job file prefix
        self.__jobID = "Job-"
        

    # main file to write abaqus input file
    def writeInp(self, jobID):
        # write coordinate and connecitivty files
        self.geo.writeXYZ(jobID)
        self.geo.writeMesh(jobID)

        # create input file
        self.__jobID = self.__jobID + str(jobID)
        filename = self.__jobID + ".inp"
        fxyz = "Job-" + str(jobID) + "-coordinates.txt"
        fconn = "Job-" + str(jobID) + "-connectivity.txt"

        with open(filename, 'w') as fout:

            #! write heading
            fout.write("*Heading\n"+
                       "** " + filename + "\n"+
                       "** Generated by: Python Preprocessor Scripts\n"+
                       "*Preprint, echo=NO, model=NO, history=NO, contact=NO\n")

            #! write part
            fout.write("**\n"+
                       "**  PARTS\n"+
                       "**\n")
            # include coordinate file
            fout.write("*Part, name=Part-shell\n"+
                       "*Node\n"+
                       "*INCLUDE, INPUT="+fxyz+"\n")
            # include connecitivty file
            fout.write("*Element, type=S3\n"+
                       "*INCLUDE, INPUT="+fconn+"\n")
            # sets for instance, usually for section properties, include all nodes/elements
            fout.write("*Nset, nset=Set-all, generate\n"+
                       "1, " + str(self.geo.nn) + " , 1\n"+
                       "*Elset, elset=Set-all, generate\n"+
                       "1, " + str(self.geo.nel) + " , 1\n")
            # write section
            fout.write("** Section: Section-shell\n"+
                       "*Shell Section, elset=Set-all, material=Material-1, section integration=GAUSS\n"+
                       "{:e}".format(self.__thk)+ ", 3\n")
            fout.write("*End Part\n")

            #! write assembly
            fout.write("**\n"+
                       "**  ASSEMBLY\n"+
                       "**\n"+
                       "*Assembly, name=Assembly\n")
            fout.write("**\n"+
                       "*Instance, name=Part-shell-1, part=Part-shell\n"+
                       "*End Instance\n"+
                       "**\n")
            # write boundary sets
            sets = self.geo.getClamped()
            fout.write("*Nset, nset=Set-clamped, instance=Part-shell-1, generate\n"+
                       sets[0]+"\n"+
                       "*Elset, elset=Set-clamped, instance=Part-shell-1, generate\n"+
                       sets[1]+"\n")
            fout.write("*End Assembly\n")    

            #! write material
            fout.write("**\n"+
                       "**  MATERIALS\n"+
                       "**\n")
            fout.write("*Material, name=Material-1\n"+
                       "*Density\n"+
                       "{:e}".format(self.__rho)+",\n"+
                       "*Elastic\n"+
                       "{:e}".format(self.__E)+", "+str(self.__nu)+"\n")

            #! write boundary conditions
            fout.write("**\n"+
                       "**  BOUNDARY CONDITIONS\n"+
                       "**\n"+
                       "** Name: BC-clamped Type: Displacement/Rotation\n")
            # all dofs constrained
            fout.write("Set-clamped, 1, 6\n")

            #! write steps
            fout.write("**\n"+
                       "**  STEP: Step-1\n"+
                       "**\n")
            fout.write("*Step, name=Step-1, nlgeom=YES, inc=1000\n"+
                       "*Static\n"+
                       "1., 1., 1e-05, 1.\n")
            fout.write("**\n"+
                       "**  LOADS\n"+
                       "**\n")
            fout.write("** Name: Load-gravity   Type: Gravity\n"+
                       "*Dload\n"+
                       ", GRAV, 9.81, 0., 0., -1.\n")
            fout.write("**\n"+
                       "**  OUTPUT REQUESTS\n"+
                       "**\n")
            fout.write("*Restart, write, frequency=0\n")
            fout.write("**\n"+
                       "**  FIELD OUTPUT: F-Output-1\n"+
                       "**\n")
            fout.write("*Output, field, frequency=99999\n"+
                       "*Node Output, exterior\n"+
                       "A, CF, COORD, RF, U, V\n"+
                       "*Element Output, exterior, directions=YES\n"+
                       "LE, PE, PEEQ, PEMAG, S\n"+
                       "*Contact Output\n"+
                       "CDISP, CSTRESS\n")
            fout.write("**\n"+
                       "**  HISTORY OUTPUT: H-Output-1\n"+
                       "**\n")
            fout.write("*Output, history, variable=PRESELECT\n")   
            fout.write("*End Step\n")


if __name__ == "__main__":
    try:
        caseID = 11
        sidelen = 0.1
        nside = 21
        case1 = InpFile(sidelen, sidelen, nside, nside)
        case1.writeInp(caseID)
        print("Job-"+str(caseID)+" preprocess completed successfully")

    except Exception as err:
        print(err.args[0])